package telegram

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/keruch/the_open_art_ton_bot/internal/domain"
	repo "github.com/keruch/the_open_art_ton_bot/internal/repository"
	log "github.com/keruch/the_open_art_ton_bot/pkg/logger"
)

type repository interface {
	AddUser(ctx context.Context, ID int64, username string, invitedID int64, chatID int64) error
	GetFieldForID(ctx context.Context, ID int64, field string) (interface{}, error)
	UpdatePoints(ctx context.Context, ID int64, points int) error
	UpdateSubscription(ctx context.Context, subscription string, ID int64, value bool) error
}

type TgBot struct {
	*tgbotapi.BotAPI
	repo   repository
	logger *log.Logger
}

type (
	ChannelName        string
	SubscriptionAction bool
)

const (
	startCommand  = "start"
	pointsCommand = "points"

	StartMessage             = "[The Open Art](https://t.me/theopenart) –ø—Ä–æ–≤–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à 100 –º–æ–Ω–µ—Ç [TON](https://t.me/theopenart).\n–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —à–∞–Ω—Å—ã –ø–æ–ª—É—á–∏—Ç—å [TON](https://t.me/theopenart).\n\nüíé –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ [The Open Art](https://t.me/theopenart).\n\n" + SubscribeToJoinMessage
	SubscribeToJoinMessage   = "–î–ª—è —É—á–∞—Å—Ç–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª [The Open Art](https://t.me/theopenart). –í–∞–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞!"
	SubscribedMessage        = "‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n\n100 TON –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã 01 —Ñ–µ–≤—Ä–∞–ª—è 2022 –≥–æ–¥–∞ –≤ 16:00. –®–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å TON –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∞–ª–ª–æ–≤: —á–µ–º –∏—Ö –±–æ–ª—å—à–µ, —Ç–µ–º –≤—ã—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å TON. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π: –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ 100 –±–∞–ª–ª–æ–≤, –Ω–æ —Å–ª–µ–¥–∏—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞–ª–∏—Å—å, –∞ —Ç–æ –±–∞–ª–ª—ã –∑–∞ –Ω–∏—Ö —É—á—Ç–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç!"
	AlreadyRegisteredMessage = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!"
	UnsubscribedMessage      = "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ [The Open Art](https://t.me/theopenart) –∏ –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –æ–ø—è—Ç—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ."
	MissingCommandMessage    = "–ö—É–¥–∞-—Ç–æ —Ç—ã –Ω–µ —Ç—É–¥–∞ –ø–æ–ª–µ–∑, –¥—Ä—É–∂–æ–∫..."

	FriendSubscribedFormatString   = "–í–∞—à –¥—Ä—É–≥ @%s –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª [The Open Art](https://t.me/theopenart) –∏ —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–µ. –ê –≤—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –±–∞–ª–ª–æ–≤!"
	FriendUnsubscribedFormatString = "–í–∞—à –¥—Ä—É–≥ @%s –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ [The Open Art](https://t.me/theopenart) –∏ –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω–∫—É—Ä—Å–µ. –ü—Ä–∏—à–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å –≤–∞—à–∏ 100 –±–∞–ª–ª–æ–≤ :("

	TheOpenArtChannel ChannelName = "@theopenart"

	theOpenArtFDBField ChannelName = "openart"

	subscribeAction   SubscriptionAction = true
	unsubscribeAction SubscriptionAction = false
)

func NewTgBot(token string, repo repository, logger *log.Logger) (*TgBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &TgBot{
		BotAPI: bot,
		repo:   repo,
		logger: logger,
	}, nil
}

func (tg *TgBot) Serve(ctx context.Context) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	u.AllowedUpdates = []string{"chat_member", "inline_query", "callback_query", "message"}
	updates := tg.GetUpdatesChan(u)

	for {
		select {
		case <-ctx.Done():
			tg.logger.Println("Telegram bot: serve done")
			return
		case update := <-updates:
			tg.processUpdate(ctx, update)
		}
	}
}

func (tg *TgBot) processUpdate(ctx context.Context, update tgbotapi.Update) {
	if update.Message != nil {
		tg.processMessage(ctx, update)
	} else if update.CallbackQuery != nil {
		tg.processCallback(ctx, update)
	} else if update.ChatMember != nil {
		tg.processChatMember(ctx, update)
	}
}

func (tg *TgBot) processMessage(ctx context.Context, update tgbotapi.Update) {
	var (
		chatID   = update.Message.Chat.ID
		userID   = update.Message.From.ID
		userName = update.Message.From.UserName
	)

	msg := tgbotapi.NewMessage(chatID, "Something went wrong!")
	msg.ParseMode = tgbotapi.ModeMarkdown

	switch update.Message.Command() {
	case startCommand:
		tg.logger.Tracef("User @%s typed /start", userName)
		msg.Text = StartMessage
		ID, err := strconv.ParseInt(update.Message.CommandArguments(), 10, 64)
		if ID == userID {
			ID = 0
		}
		if err == nil && ID != 0 {
			invitedUser, err := tg.repo.GetFieldForID(ctx, ID, domain.UsernameField)
			if err != nil {
				tg.logger.WithField("Method", "GetFieldForID").Error(err)
			}
			msg.Text = fmt.Sprintf("–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –¥—Ä—É–≥–æ–º @%v!\n\n%s", invitedUser, StartMessage)
		}
		if err = tg.repo.AddUser(ctx, userID, userName, ID, chatID); err != nil {
			if errors.Is(err, repo.ErrorAlreadyRegistered) {
				tg.logger.WithField("Method", "AddUser").Info(err)
				msg.Text = AlreadyRegisteredMessage
				msg.ReplyMarkup = createInlineKeyboardMarkupWithID(userID)
				if _, err := tg.Send(msg); err != nil {
					tg.logger.WithField("Method", "Send").Error(err)
					return
				}
				return
			}
			tg.logger.WithField("Method", "AddUser").Error(err)
			return
		}

		if _, err := tg.Send(msg); err != nil {
			tg.logger.WithField("Method", "Send").Error(err)
			return
		}

		ok, err := tg.isSubscribed(userID, TheOpenArtChannel)
		if err != nil {
			tg.logger.WithField("Method", "isSubscribed").Error(err)
			return
		}

		if ok {
			if err := tg.updateSubscription(ctx, userID, userName, theOpenArtFDBField, subscribeAction, 100); err != nil {
				tg.logger.WithField("Method", "updateSubscription").Error(err)
				return
			}
		} else {
			msg.Text = msg.Text + "\n\n" + SubscribeToJoinMessage
		}
	default:
		msg.Text = MissingCommandMessage
		if _, err := tg.Send(msg); err != nil {
			tg.logger.WithField("Method", "Send").Error(err)
			return
		}
	}
}

func (tg *TgBot) processCallback(ctx context.Context, update tgbotapi.Update) {
	var (
		chatID   = update.CallbackQuery.Message.Chat.ID
		userID   = update.CallbackQuery.From.ID
		userName = update.CallbackQuery.From.UserName
	)

	callback := tgbotapi.NewCallback(update.CallbackQuery.ID, update.CallbackData())
	if _, err := tg.Request(callback); err != nil {
		tg.logger.WithField("Method", "Request").Error(err)
		return
	}

	msg := tgbotapi.NewMessage(chatID, "Something went wrong!")
	msg.ParseMode = tgbotapi.ModeMarkdown

	switch update.CallbackQuery.Data {
	case pointsCommand:
		tg.logger.WithField("User", userName).Trace("Got points command callback")
		points, err := tg.repo.GetFieldForID(ctx, userID, domain.PointsField)
		if err != nil {
			tg.logger.WithField("Method", "GetFieldForID").Error(err)
		}
		msg.ReplyMarkup = createInlineKeyboardMarkupWithID(userID)
		msg.Text = fmt.Sprintf("–£ –≤–∞—Å %v –±–∞–ª–ª–æ–≤", points.(int32))
	}

	if _, err := tg.Send(msg); err != nil {
		tg.logger.WithField("Method", "Send").Error(err)
	}
}

func (tg *TgBot) processChatMember(ctx context.Context, update tgbotapi.Update) {
	var (
		userID   = update.ChatMember.From.ID
		userName = update.ChatMember.From.UserName
	)

	if update.ChatMember.NewChatMember.Status == "left" {
		if err := tg.updateSubscription(ctx, userID, userName, theOpenArtFDBField, unsubscribeAction, -100); err != nil {
			tg.logger.WithField("Method", "updateSubscription").WithField("Action", "Subscribe").Error(err)
			return
		}
	} else if update.ChatMember.NewChatMember.Status == "member" {
		if err := tg.updateSubscription(ctx, userID, userName, theOpenArtFDBField, subscribeAction, 100); err != nil {
			tg.logger.WithField("Method", "updateSubscription").WithField("Action", "Unsubscribe").Error(err)
			return
		}
	}
}

func (tg *TgBot) getInvitedByUser(ctx context.Context, userID int64) (int64, error) {
	invitedBy, err := tg.repo.GetFieldForID(ctx, userID, domain.InvitedByField)
	if err != nil {
		return 0, err
	}
	invitedByID, ok := invitedBy.(int64)
	if !ok {
		return 0, err
	}

	return invitedByID, nil
}

func (tg *TgBot) updateSubscription(ctx context.Context, userID int64, username string, channel ChannelName, action SubscriptionAction, points int) error {
	if err := tg.repo.UpdateSubscription(ctx, string(channel), userID, bool(action)); err != nil {
		return err
	}

	invitedByID, err := tg.getInvitedByUser(ctx, userID)
	if err != nil {
		return err
	}
	if invitedByID != 0 {
		err = tg.repo.UpdatePoints(ctx, invitedByID, points)
		if err != nil {
			return err
		}

		msg := tgbotapi.NewMessage(invitedByID, "Something went wrong!")
		msg.ParseMode = tgbotapi.ModeMarkdown

		if action == subscribeAction {
			msg.Text = fmt.Sprintf(FriendSubscribedFormatString, username)
		} else {
			msg.Text = fmt.Sprintf(FriendUnsubscribedFormatString, username)
		}

		if _, err = tg.Send(msg); err != nil {
			return err
		}
	}

	msg := tgbotapi.NewMessage(userID, "Something went wrong!")
	msg.ParseMode = tgbotapi.ModeMarkdown

	if action == subscribeAction {
		msg.Text = fmt.Sprintf(SubscribedMessage)
		msg.ReplyMarkup = createInlineKeyboardMarkupWithID(userID)
	} else {
		msg.Text = fmt.Sprintf(UnsubscribedMessage)
	}

	if _, err = tg.Send(msg); err != nil {
		return err
	}

	return nil
}

func createInlineKeyboardMarkupWithID(ID int64) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonSwitch("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", fmt.Sprintf("–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: \n\nhttps://t.me/theopenartbot?start=%d", ID)),
			//tgbotapi.NewInlineKeyboardButtonURL("Subscribe", "https://t.me/theopenart"),
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã", pointsCommand),
		),
	)
}

func (tg *TgBot) isSubscribed(userID int64, channel ChannelName) (bool, error) {
	config := tgbotapi.ChatConfigWithUser{
		SuperGroupUsername: string(channel),
		UserID:             userID,
	}
	member, err := tg.GetChatMember(tgbotapi.GetChatMemberConfig{ChatConfigWithUser: config})
	if err != nil {
		return false, err
	}
	return member.Status == "member" || member.Status == "creator" || member.Status == "administrator", nil
}
